-- CREATE TABLE product (
--     id VARCHAR(255) NOT NULL,
--     title VARCHAR(255),
--     description TEXT,
--     price BIGINT,
--     stock BIGINT,
--     is_discount BOOLEAN,
--     discount_price BIGINT,
--     PRIMARY KEY (id)
-- );

-- CREATE TABLE cart (
--     id VARCHAR(255) PRIMARY KEY,
--     amount_total BIGINT
-- );



-- CREATE TABLE product_cart (
--     id VARCHAR(255) PRIMARY KEY,
--     product_id VARCHAR(255),
--     cart_id VARCHAR(255),
--     FOREIGN KEY (product_id) REFERENCES product(id),
--     FOREIGN KEY (cart_id) REFERENCES cart(id)
-- );

ALTER TABLE product_category DROP PRIMARY KEY;



-- select p.*
-- from product p
-- join product_category pc on p.id = pc.product_id
-- join category c on pc.category_id = c.id
-- where c.id = 'e6e4f9f8-a0d7-41ce-96a1-af13c719e842'

CREATE TABLE payment (
    id VARCHAR(255) NOT NULL,
    payment_complete BOOLEAN,
    PRIMARY KEY (id)
);

drop table payment ;
--
-- CREATE TABLE cart (
--     id BIGINT AUTO_INCREMENT PRIMARY KEY,
--     amount_total BIGINT
-- );
--

CREATE TABLE cart_payment (
    id BIGINT AUTO_INCREMENT PRIMARY KEY,
    cart_id VARCHAR(255),
    payment_id VARCHAR(255),
    FOREIGN KEY (cart_id) REFERENCES cart(id),
    FOREIGN KEY (payment_id) REFERENCES payment(id)
);



DESCRIBE payment ;


select p.*
from product p
join product_cart pc on p.id = pc.product_id
join cart c on pc.cart_id = c.id
join cart_payment cp on c.id = cp.cart_id
join payment p2 on cp.payment_id = p2.id
where p2.id = '18c70190-9026-486c-be11-d43d8c738db6';





CREATE TABLE history (
     id BIGINT AUTO_INCREMENT PRIMARY key
);

CREATE TABLE IF NOT EXISTS payment (
    id BIGINT AUTO_INCREMENT PRIMARY KEY
    -- Other fields as required
);

CREATE TABLE payment (
    id VARCHAR(255) AUTO_INCREMENT NOT NULL,
    payment_complete BOOLEAN,
    PRIMARY KEY (id)
);

CREATE TABLE payment_history (
   id BIGINT AUTO_INCREMENT PRIMARY KEY,
    payment_id VARCHAR(255),
    history_id BIGINT,
    CONSTRAINT fk_payment FOREIGN KEY (payment_id) REFERENCES payment(id),
    CONSTRAINT fk_history FOREIGN KEY (history_id) REFERENCES history(id)
);

CREATE TABLE role (
    id VARCHAR(255) PRIMARY KEY,
    role VARCHAR(255) NOT null
);

CREATE TABLE user (
    id VARCHAR(255) PRIMARY KEY,
    username VARCHAR(255) NOT NULL,
    firstName VARCHAR(255) NOT NULL,
    lastName VARCHAR(255) NOT NULL,
    email VARCHAR(255) NOT NULL,
    password VARCHAR(255) NOT NULL,
    token VARCHAR(255)
);


CREATE TABLE user (
    id BIGINT AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(255) NOT NULL,
    email VARCHAR(255) NOT NULL,
    password VARCHAR(255) NOT NULL,
    fullname VARCHAR(255) NOT NULL
);


-- Create product_category table
CREATE TABLE IF NOT EXISTS product_category (
    id VARCHAR(255) PRIMARY KEY,
    product_id VARCHAR(255) NOT NULL,
    category_id VARCHAR(255) NOT NULL,
    CONSTRAINT fk_product
        FOREIGN KEY (product_id) REFERENCES product(id)
        ON DELETE CASCADE,
    CONSTRAINT fk_category
        FOREIGN KEY (category_id) REFERENCES category(id)
        ON DELETE CASCADE
);


CREATE TABLE user_role (
    id BIGINT AUTO_INCREMENT PRIMARY KEY,
    user_id VARCHAR(255) NOT NULL,
    role_id VARCHAR(255) NOT NULL,
    FOREIGN KEY (user_id) REFERENCES user(id),
    FOREIGN KEY (role_id) REFERENCES role(id)
);
